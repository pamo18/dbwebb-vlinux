{"ast":null,"code":"var _jsxFileName = \"/Users/office/Documents/dbwebb-kurser/vlinux/me/kmom10/bthloggen/webbclient/src/components/page/admin/Edit.js\";\n\n/*eslint max-len: [\"error\", { \"code\": 150 }]*/\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport base from '../../../config/api.js';\nlet api = base.api();\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.updateText = this.updateText.bind(this);\n    this.registerSubmit = this.registerSubmit.bind(this);\n    this.getReports = this.getReports.bind(this);\n    this.showReport = this.showReport.bind(this);\n    this.state = {\n      current: {\n        title: \"\",\n        content: \"\"\n      },\n      options: \"\",\n      reports: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.getReports();\n  }\n\n  updateText(e) {\n    this.setState({\n      current: {\n        title: this.state.current.title,\n        content: e.target.value\n      }\n    });\n  }\n\n  registerSubmit(event) {\n    event.preventDefault();\n    const data = new FormData(event.target);\n    let report = {\n      \"title\": data.get('title'),\n      \"content\": data.get('content')\n    };\n    fetch(api + \"/reports/edit\", {\n      method: 'POST',\n      body: JSON.stringify(report),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(this.props.history.push('/reports/week/1'));\n  }\n\n  getReports() {\n    const that = this;\n    let all = [1, 2, 3, 4, 5, 6, 10],\n        options = [],\n        reports = [],\n        count = 0;\n    all.forEach(function (report) {\n      fetch(api + \"/reports/week/\".concat(report)).then(res => res.json()).then(function (res) {\n        if (res.data.report.title !== \"Report comming soon\") {\n          let title = res.data.report.title;\n          options[report] = React.createElement(\"option\", {\n            value: title,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72\n            },\n            __self: this\n          }, title);\n          reports[report] = {\n            title: title,\n            content: res.data.report.content\n          };\n        }\n\n        if (all.length === count + 1) {\n          that.setState({\n            options: options,\n            reports: reports\n          });\n        }\n\n        count++;\n      });\n    });\n  }\n\n  showReport(e) {\n    let current = this.state.reports.filter(function (report) {\n      return report.title === e.target.value;\n    });\n    this.setState({\n      current: current[0]\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"form-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Edit Report\"), React.createElement(\"form\", {\n      action: \"/reports/week/1\",\n      method: \"post\",\n      className: \"form-register\",\n      onSubmit: this.registerSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Title\", React.createElement(\"select\", {\n      className: \"form-input\",\n      name: \"title\",\n      onChange: this.showReport,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Select report\"), this.state.options)), React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Content\", React.createElement(\"textarea\", {\n      className: \"form-input textarea\",\n      type: \"text\",\n      name: \"content\",\n      onChange: this.updateText,\n      value: this.state.current.content,\n      required: true,\n      placeholder: \"Select the report to edit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      className: \"form-label check-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"check-input\",\n      type: \"checkbox\",\n      name: \"finished\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), \"Are you finished?\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"button form-button center\",\n      type: \"submit\",\n      name: \"edit\",\n      value: \"Save\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })));\n  }\n\n}\n\nEdit.propTypes = {\n  match: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\nexport default Edit;","map":{"version":3,"sources":["/Users/office/Documents/dbwebb-kurser/vlinux/me/kmom10/bthloggen/webbclient/src/components/page/admin/Edit.js"],"names":["React","Component","PropTypes","base","api","Edit","constructor","props","updateText","bind","registerSubmit","getReports","showReport","state","current","title","content","options","reports","componentDidMount","e","setState","target","value","event","preventDefault","data","FormData","report","get","fetch","method","body","JSON","stringify","headers","then","history","push","that","all","count","forEach","res","json","length","filter","render","propTypes","match","object","isRequired","location"],"mappings":"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","sourcesContent":["/*eslint max-len: [\"error\", { \"code\": 150 }]*/\n\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport base from '../../../config/api.js';\nlet api = base.api();\n\nclass Edit extends Component {\n    static propTypes = {\n        match: PropTypes.object.isRequired,\n        location: PropTypes.object.isRequired,\n        history: PropTypes.object.isRequired\n    };\n    constructor(props) {\n        super(props);\n        this.updateText = this.updateText.bind(this);\n        this.registerSubmit = this.registerSubmit.bind(this);\n        this.getReports = this.getReports.bind(this);\n        this.showReport = this.showReport.bind(this);\n        this.state = {\n            current: {\n                title: \"\",\n                content: \"\"\n            },\n            options: \"\",\n            reports: \"\"\n        };\n    }\n    componentDidMount() {\n        this.getReports();\n    }\n    updateText(e) {\n        this.setState({\n            current: {\n                title: this.state.current.title,\n                content: e.target.value\n            },\n        });\n    }\n    registerSubmit(event) {\n        event.preventDefault();\n        const data = new FormData(event.target);\n\n        let report = {\n            \"title\": data.get('title'),\n            \"content\": data.get('content')\n        };\n\n        fetch(api + \"/reports/edit\", {\n            method: 'POST',\n            body: JSON.stringify(report),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(this.props.history.push('/reports/week/1'));\n    }\n    getReports() {\n        const that = this;\n\n        let all = [1, 2, 3, 4, 5, 6, 10],\n            options = [],\n            reports = [],\n            count = 0;\n\n        all.forEach(function (report) {\n            fetch(api + `/reports/week/${report}`)\n                .then(res => res.json())\n                .then(function(res) {\n                    if (res.data.report.title !== \"Report comming soon\") {\n                        let title = res.data.report.title;\n\n                        options[report] = <option value={title}>{title}</option>;\n                        reports[report] = {\n                            title: title,\n                            content: res.data.report.content\n                        };\n                    }\n                    if (all.length === count + 1) {\n                        that.setState({\n                            options: options,\n                            reports: reports\n                        });\n                    }\n                    count ++;\n                });\n        });\n    }\n    showReport(e) {\n        let current = this.state.reports.filter(function(report) {\n            return report.title === e.target.value;\n        });\n\n        this.setState({\n            current: current[0]\n        });\n    }\n    render() {\n        return (\n            <div className=\"form-wrapper\">\n                <h1>Edit Report</h1>\n                <form action=\"/reports/week/1\" method=\"post\" className=\"form-register\" onSubmit={this.registerSubmit}>\n                    <label className=\"form-label\">Title\n                        <select className=\"form-input\" name=\"title\" onChange={this.showReport} required>\n                            <option disabled>Select report</option>\n                            {this.state.options}\n                        </select>\n                    </label>\n\n                    <label className=\"form-label\">Content\n                        <textarea\n                            className=\"form-input textarea\"\n                            type=\"text\" name=\"content\"\n                            onChange={this.updateText}\n                            value={this.state.current.content}\n                            required\n                            placeholder=\"Select the report to edit\">\n                        </textarea>\n                    </label>\n\n                    <label className=\"form-label check-label\">\n                        <input className=\"check-input\" type=\"checkbox\" name=\"finished\" required />\n                        Are you finished?\n                    </label><br />\n\n                    <input className=\"button form-button center\" type=\"submit\" name=\"edit\" value=\"Save\" />\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Edit;\n"]},"metadata":{},"sourceType":"module"}