{"ast":null,"code":"var _jsxFileName = \"/Users/office/Documents/dbwebb-kurser/vlinux/me/kmom10/bthloggen/webbclient/src/components/socket/chat.js\";\n\n/*eslint max-len: [\"error\", { \"code\": 200 }]*/\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport base from '../../config/api.js';\nimport io from 'socket.io-client';\nconst socket = io(base.chat());\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.updateConversation = this.updateConversation.bind(this);\n    this.saveConversation = this.saveConversation.bind(this);\n    this.adminConversations = this.adminConversations.bind(this);\n    this.newMessage = this.newMessage.bind(this);\n    this.state = {\n      conversation: [],\n      conversationData: \"\",\n      savedConversations: [],\n      users: \"\",\n      username: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.startChat();\n    socket.emit('resume conversation');\n\n    if (localStorage.getItem(\"activeUser\")) {\n      let user = localStorage.getItem(\"activeUser\"),\n          profile = [];\n      profile = JSON.parse(user);\n      this.setState({\n        username: profile.name\n      }, () => socket.emit('user joined', profile.name), socket.emit('get conversations'));\n    } else {\n      this.props.history.push('/login');\n    }\n  }\n\n  startChat() {\n    let that = this;\n    socket.on('connect', function () {\n      console.info(\"Connected to chat\");\n    });\n    socket.on('disconnect', function () {\n      console.info(\"Disconnected from chat\");\n    });\n    socket.on('current users', function (users) {\n      let currentUsers = [],\n          currentConversation = that.state.conversation;\n      users.all.map(function (user) {\n        currentUsers.push(React.createElement(\"li\", {\n          key: user,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, user));\n        return true;\n      });\n\n      if (users.new) {\n        currentConversation.push(React.createElement(\"div\", {\n          className: \"chat-container message\",\n          key: users.new,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"newUser center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, users.new, \" has connected.\")));\n      } else if (users.left) {\n        currentConversation.push(React.createElement(\"div\", {\n          className: \"chat-container message\",\n          key: users.left,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"oldUser center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, users.left, \" has disconnected.\")));\n      }\n\n      that.setState({\n        users: currentUsers,\n        conversation: currentConversation\n      });\n    });\n    socket.on('new message', function (conversation) {\n      that.updateConversation(conversation);\n    });\n    socket.on('current conversation', function (conversation) {\n      that.updateConversation(conversation);\n    });\n    socket.on('new conversation', function (conversation) {\n      that.setState({\n        conversation: conversation\n      });\n    });\n    socket.on('show conversations', function (savedConversations) {\n      let saved = [];\n      savedConversations.map(function (conversation) {\n        let time = conversation.timestamp;\n        saved.push(React.createElement(\"option\", {\n          key: time,\n          value: time,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, time));\n        return true;\n      });\n      that.setState({\n        savedConversations: saved\n      });\n    });\n  }\n\n  newMessage(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      socket.emit('chat message', {\n        user: this.state.username,\n        text: e.target.value\n      });\n      e.target.value = \"\";\n      this.setState({\n        last: e.target.value\n      });\n    }\n  }\n\n  updateConversation(conversation) {\n    let that = this,\n        currentConversation = [];\n    conversation.map(function (message) {\n      let key = \"message-\" + message.count,\n          containerClass = that.state.username === message.user ? \"chat-container me-container\" : \"chat-container\",\n          userClass = that.state.username === message.user ? \"user me-user\" : \"user\";\n      currentConversation.push(React.createElement(\"div\", {\n        className: containerClass,\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: userClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, message.user), React.createElement(\"p\", {\n        className: \"message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, message.text), React.createElement(\"span\", {\n        className: \"time-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, message.timestamp)));\n      return true;\n    });\n    this.setState({\n      conversation: currentConversation,\n      conversationData: conversation\n    });\n  }\n\n  clearConversation() {\n    socket.emit('clear conversation');\n  }\n\n  saveConversation() {\n    let currentConversation = this.state.conversation;\n    socket.emit('save conversation', this.state.username);\n    currentConversation.push(React.createElement(\"div\", {\n      className: \"chat-container message saved\",\n      key: \"saved\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Chat saved!\")));\n  }\n\n  adminConversations(e) {\n    const data = new FormData(e.target);\n\n    if (this.state.action === \"restore\") {\n      socket.emit('restore conversation', data.get('timestamp'));\n    } else if (this.state.action === \"delete\") {\n      socket.emit('delete conversation', data.get('timestamp'));\n    }\n  }\n\n  render() {\n    return React.createElement(\"article\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Chat\"), React.createElement(\"form\", {\n      className: \"chat-admin\",\n      onSubmit: this.adminConversations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      name: \"timestamp\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      disabled: true,\n      selected: true,\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Choose restore point\"), this.state.savedConversations), React.createElement(\"div\", {\n      className: \"admin-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"button restore\",\n      type: \"submit\",\n      onClick: () => this.setState({\n        action: \"restore\"\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Restore chat\"), React.createElement(\"button\", {\n      className: \"button delete\",\n      type: \"submit\",\n      onClick: () => this.setState({\n        action: \"delete\"\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Delete chat\"))), React.createElement(\"h4\", {\n      className: \"users\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Connected users:\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, this.state.users), React.createElement(\"div\", {\n      id: \"conversation\",\n      className: \"conversation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, this.state.conversation), React.createElement(\"textarea\", {\n      id: \"new-message\",\n      className: \"new-message\",\n      name: \"message\",\n      onKeyDown: this.newMessage,\n      placeholder: \"Start chatting, press enter send message.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"chat-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"button save\",\n      onClick: this.saveConversation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Save chat\"), React.createElement(\"button\", {\n      className: \"button clear\",\n      onClick: () => {\n        if (window.confirm('Clear the chat?')) {\n          this.clearConversation();\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Clear chat\")));\n  }\n\n}\n\nChat.propTypes = {\n  match: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\nexport default Chat;","map":{"version":3,"sources":["/Users/office/Documents/dbwebb-kurser/vlinux/me/kmom10/bthloggen/webbclient/src/components/socket/chat.js"],"names":["React","Component","PropTypes","base","io","socket","chat","Chat","constructor","props","updateConversation","bind","saveConversation","adminConversations","newMessage","state","conversation","conversationData","savedConversations","users","username","componentDidMount","startChat","emit","localStorage","getItem","user","profile","JSON","parse","setState","name","history","push","that","on","console","info","currentUsers","currentConversation","all","map","new","left","saved","time","timestamp","e","key","preventDefault","text","target","value","last","message","count","containerClass","userClass","clearConversation","data","FormData","action","get","render","window","confirm","propTypes","match","object","isRequired","location"],"mappings":"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","sourcesContent":["/*eslint max-len: [\"error\", { \"code\": 200 }]*/\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport base from '../../config/api.js';\nimport io from 'socket.io-client';\n\nconst socket = io(base.chat());\n\nclass Chat extends Component {\n    static propTypes = {\n        match: PropTypes.object.isRequired,\n        location: PropTypes.object.isRequired,\n        history: PropTypes.object.isRequired\n    };\n    constructor(props) {\n        super(props);\n        this.updateConversation = this.updateConversation.bind(this);\n        this.saveConversation = this.saveConversation.bind(this);\n        this.adminConversations = this.adminConversations.bind(this);\n        this.newMessage = this.newMessage.bind(this);\n        this.state = {\n            conversation: [],\n            conversationData: \"\",\n            savedConversations: [],\n            users: \"\",\n            username: \"\"\n        };\n    }\n\n    componentDidMount() {\n        this.startChat();\n        socket.emit('resume conversation');\n        if (localStorage.getItem(\"activeUser\")) {\n            let user = localStorage.getItem(\"activeUser\"),\n                profile = [];\n\n            profile = JSON.parse(user);\n            this.setState({\n                username: profile.name\n            }, () => socket.emit('user joined', profile.name), socket.emit('get conversations'));\n        } else {\n            this.props.history.push('/login');\n        }\n    }\n\n    startChat() {\n        let that = this;\n\n        socket.on('connect', function() {\n            console.info(\"Connected to chat\");\n        });\n\n        socket.on('disconnect', function() {\n            console.info(\"Disconnected from chat\");\n        });\n\n        socket.on('current users', function (users) {\n            let currentUsers = [],\n                currentConversation = that.state.conversation;\n\n            users.all.map(function (user) {\n                currentUsers.push(<li key={user}>{user}</li>);\n                return true;\n            });\n\n            if (users.new) {\n                currentConversation.push(\n                    <div className=\"chat-container message\" key={users.new}>\n                        <p className=\"newUser center\">{ users.new } has connected.</p>\n                    </div>\n                );\n            } else if (users.left) {\n                currentConversation.push(\n                    <div className=\"chat-container message\" key={users.left}>\n                        <p className=\"oldUser center\">{ users.left } has disconnected.</p>\n                    </div>\n                );\n            }\n\n            that.setState({\n                users: currentUsers,\n                conversation: currentConversation\n            });\n        });\n\n        socket.on('new message', function (conversation) {\n            that.updateConversation(conversation);\n        });\n\n        socket.on('current conversation', function (conversation) {\n            that.updateConversation(conversation);\n        });\n\n        socket.on('new conversation', function (conversation) {\n            that.setState({\n                conversation: conversation\n            });\n        });\n\n        socket.on('show conversations', function (savedConversations) {\n            let saved = [];\n\n            savedConversations.map(function (conversation) {\n                let time = conversation.timestamp;\n\n                saved.push(<option key={time} value={time}>{time}</option>);\n                return true;\n            });\n            that.setState({\n                savedConversations: saved\n            });\n        });\n    }\n\n    newMessage(e) {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            socket.emit('chat message', {\n                user: this.state.username,\n                text: e.target.value\n            });\n            e.target.value = \"\";\n            this.setState({\n                last: e.target.value\n            });\n        }\n    }\n\n    updateConversation(conversation) {\n        let that = this,\n            currentConversation = [];\n\n        conversation.map(function (message) {\n            let key = \"message-\" + message.count,\n                containerClass = that.state.username === message.user ? \"chat-container me-container\" : \"chat-container\",\n                userClass = that.state.username === message.user ? \"user me-user\" : \"user\";\n\n            currentConversation.push(\n                <div className={containerClass} key={key}>\n                    <p className={userClass}>{ message.user }</p>\n                    <p className=\"message\">{ message.text }</p>\n                    <span className=\"time-left\">{ message.timestamp }</span>\n                </div>\n            );\n            return true;\n        });\n        this.setState({\n            conversation: currentConversation,\n            conversationData: conversation\n        });\n    }\n\n    clearConversation() {\n        socket.emit('clear conversation');\n    }\n\n    saveConversation() {\n        let currentConversation = this.state.conversation;\n\n        socket.emit('save conversation', this.state.username);\n        currentConversation.push(\n            <div className=\"chat-container message saved\" key={\"saved\"}>\n                <p className=\"center\">Chat saved!</p>\n            </div>\n        );\n    }\n\n    adminConversations(e) {\n        const data = new FormData(e.target);\n\n        if (this.state.action === \"restore\") {\n            socket.emit('restore conversation', data.get('timestamp'));\n        } else if (this.state.action === \"delete\") {\n            socket.emit('delete conversation', data.get('timestamp'));\n        }\n    }\n\n    render() {\n        return (\n            <article>\n                <h1>Chat</h1>\n                <form className=\"chat-admin\" onSubmit={this.adminConversations}>\n                    <select name=\"timestamp\" required>\n                        <option disabled selected value=\"\">Choose restore point</option>\n                        { this.state.savedConversations }\n                    </select>\n                    <div className=\"admin-buttons\">\n                        <button className=\"button restore\" type=\"submit\" onClick={() => this.setState({action: \"restore\"})}>Restore chat</button>\n                        <button className=\"button delete\" type=\"submit\" onClick={() => this.setState({action: \"delete\"})}>Delete chat</button>\n                    </div>\n                </form>\n                <h4 className=\"users\">Connected users:</h4>\n                <ol>\n                    { this.state.users }\n                </ol>\n                <div id=\"conversation\" className=\"conversation\">{ this.state.conversation }</div>\n                <textarea\n                    id=\"new-message\"\n                    className=\"new-message\"\n                    name=\"message\"\n                    onKeyDown={ this.newMessage }\n                    placeholder=\"Start chatting, press enter send message.\"\n                />\n                <div className=\"chat-buttons\">\n                    <button className=\"button save\" onClick={this.saveConversation}>Save chat</button>\n                    <button className=\"button clear\" onClick={() => {if (window.confirm('Clear the chat?')) {this.clearConversation();}}}>Clear chat</button>\n                </div>\n            </article>\n        );\n    }\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}